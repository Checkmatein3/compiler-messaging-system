/*
***********************************************************************************
    Daniel Kolodziejczak

    Assignment 4
    March 31,2017
    Database for a message management and viewing system. Database reset program

    Assignment 3
    March 19, 2017
    Implementation of an Interface Description Language that allows 
    for dynamically building the web interface of a message management and viewing 
    system.

    Assignment 2
    February 17,2017
    This program acts as a message management and viewing system.

    Assignment 1
    January 27,2017
    This program converts c++light(.cc) source code to c(.c) source code.
***********************************************************************************
*/

***********************************************************************************
Usage
***********************************************************************************

To compile the programs and create required files/folders:
make

To run and use the programs:

Usage: db <flag>

List of all flags:
-clear  Deletes the tables from the database.
-reset  Removes all of the posts, users, streams, and any other information from the tables in the database.
-posts  Prints out all of the posts stored in the database.
-users  Prints out all of the stream names stored in the databse.
-streams        Prints out all of the streams stored in the database.
-help   Prints out a usage message.

The program also contains the following custom functions for use by the viewing program followed by stdin input each on their own line.
-streamsWithUser Retrieves the streams that the user has access to.
    username
-totalPostsRead Retrieves the total number of posts read for the given stream and user.
    stream name    
    username
-updateLastPostRead Updates the number of posts read by the user for the given stream.
    stream name
    username
    numPostsRead
-markAllPostsRead Marks all posts as read for the given stream and user. 'All' will mark all posts for all streams as read for the user.
    stream name
    username   
-postAtIndex Retrieves a formatted post at the given index.
    stream name
    postIndex        

Assignment 3:
IDL
**********
This program allows for generating php files containing html and css from 
configuration files with a .wpml suffix containing Interface Description Language.

./IDL <IDLfile.wpml>
- the interface created is sent to stdout

To redirect the output to a file:
./IDL <IDLfile.wpml> > <webpage.php>

Assumptions
For all interface elements:
- lines in the IDL file cannot exceed 1000 characters excluding newline
- each interface element is denoted by a period followed by a character representing the 
interface element and a list of attributes that appear between brackets
- there can be multiple interface elements per line, with no leading or trailing space, or 
spaces between element ending bracket and next element period
- attributes are a comma separated list of key value pairs and unknown attributes
- attributes cannnot contain commas
- attributes cannot contain spaces between any of comma and key, key and equals, 
equals and value, value and comma
- values in double quotes cannot contain double quotes
- unknown attributes not contained in the attributes list of an interface element can be any 
valid string not containing a comma and may be printed to specified tags
- the order that attributes should appear in will be specifed by numbers, X meaning it can 
appear anywhere, and attributes listed under the same number can appear anywhere
- attribute types with defaults are optional to include in the attribute list

For details of adding each interface element, refer to IDL.h.

Web View
**********
This program allows users to view messages from streams.

Go to <serverPath>/index.php to begin at the home page of the web interface for the message 
management and viewing system.
index.php is generated by the Makefile.
It can also be generated by running:
./IDL <index.wpml> > <index.php>

The webpages that are accessible by the current page being requested will be generated.

Login on the index.php page by entering a username and clicking the login button.

Successful login will redirect the user to stream.php, where a stream can be selected for viewing 
from the list of streams available to the logged-in user.
Select "all" to view posts from all streams.

Upon selecting a stream available to the user logged in, the user will be redirected to view.php.

Use any of the buttons to perform an operation:

    Post to Stream - redirect to post.php
    Change Stream - redirect to stream.php
    Add/Remove Author - redirect to addAuthor.php

    Mark All Posts As Read - mark all the posts of all streams being viewed as read
    Check For New - check for new messages and display the next unread message
    Toggle Sort - toggle the order to view messages by the selected radio button option (Sort By Date or Sort By Username)

    Previous - view the previous post in the selected stream(s)
    Next - view the next post in the selected stream(s)

    Change User - redirect to index.php

When redirected to addAuthor.php, the user can enter an author to add or remove by selecting the 
corresponding radio button option and clicking the submit button. The user can also cancel adding
or removing an author by clicking the back button to return to view.php.

When redirected to post.php, the user can enter the stream they wish to post to and a message in
the text area, then click the submit button to submit the post. The user can also cancel creating 
a new post by click the back button to return to view.php.



***********************************************************************************
Known Limitations and Assumptions
***********************************************************************************
see IDL Assumptions
number of posts read does not update while viewing streams


***********************************************************************************
References
***********************************************************************************
Reference to mydb example program given by Dr. Calvert
